fulldircc <- alldata[complete.cases(alldata),]
corrvec<- c(corrvec,cor(fulldircc$sulfate, fulldircc$nitrate))
corrvec
}
output <- do.call(rbind,corrvec)
output
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
fulldirectory <- complete(directory)
alldata <- data.frame()
tmp <- vector(mode = "list", length = 1)
idthreshold <- fulldirectory[fulldirectory["nobs"] > threshold,]$id
for (i in idthreshold) {
alldata <- read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"), ".csv", sep = ""))
fulldircc <- alldata[complete.cases(alldata),]
corrvec<- c(corrvec,cor(fulldircc$sulfate, fulldircc$nitrate))
corrvec
}
#output <- do.call(rbind,corrvec)
return(corrvec)
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
fulldirectory <- complete(directory)
alldata <- data.frame()
corrvec <- numeric()
idthreshold <- fulldirectory[fulldirectory["nobs"] > threshold,]$id
for (i in idthreshold) {
alldata <- read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"), ".csv", sep = ""))
fulldircc <- alldata[complete.cases(alldata),]
corrvec<- c(corrvec,cor(fulldircc$sulfate, fulldircc$nitrate))
corrvec
}
#output <- do.call(rbind,corrvec)
return(corrvec)
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
fulldirectory <- complete(directory)
alldata <- data.frame()
corrvec <- numeric()
idthreshold <- fulldirectory[fulldirectory["nobs"] > threshold,]$id
for (i in idthreshold) {
alldata <- read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"), ".csv", sep = ""))
fulldircc <- alldata[complete.cases(alldata),]
corrvec<- c(corrvec,cor(fulldircc$sulfate, fulldircc$nitrate))
corrvec
}
output <- do.call(rbind,corrvec)
output
#return(corrvec)
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
fulldirectory <- complete(directory)
alldata <- data.frame()
corrvec <- numeric()
idthreshold <- fulldirectory[fulldirectory["nobs"] > threshold,]$id
for (i in idthreshold) {
alldata <- read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"), ".csv", sep = ""))
fulldircc <- alldata[complete.cases(alldata),]
corrvec<- c(corrvec,cor(fulldircc$sulfate, fulldircc$nitrate))
corrvec
}
#output <- do.call(rbind,corrvec)
return(corrvec)
}
cr <- corr("specdata", 150)
cr(head)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
cr <- corr("specdata")
summary(cr)
lenth(cr)
length(cr)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
2
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit
submit()
library(swirl)
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("datasciencecoursera/testdir/mytest3.R"
)
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"))
info()
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2",recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
## retrieve and cache mean as vector(actually the "vector" is code- a list containing needed function)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## computation to find mean if not already cached
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
`:`
`:`
":"
info()
?`:`
seq(1,20)
seq(0, 10, by=0.5)
seq(5, 10, length = 30)
my_seq <-seq(5, 10, length = 30)
length(my_seq)
1:length(myseq)
1:length(my_seq)
seq(along.with= my_seq
)
seq_along(my_seq)
rep(0, times= 40)
rep(c(0, 1, 2,), times = 10)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vet >= 6
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Aimee")
my_name
paste (my_name, collapse = " ")
paste ("Hello", "world", sep = " ")
paste ("Hello", "world!", sep = " ")
paste(1:3,c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data==NA
sum(my_nam)
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10}
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y<0]
y[y>0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(1, 3, 7)]
x[c(3, 5, 7)]
x[0]
x[300]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- as.matrix(1:30, nrow=4, ncol=5)
my_matrix2 <- matrix(1:30, nrow=4, ncol=5)
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data,cnames)
?colnames
colnames(my_data) -> cnames
colnames(my_data) <- cnames
my_data
ls()
git fetch
lis
ls
ls()
/
## retrieve and cache mean as vector(actually the "vector" is code- a list containing needed function)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() ms
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## computation to find mean if not already cached
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
x<-c(1,2,3,4)
cachemean(x)
makeVector(x)
cachemean(x)
cachemean(makeVector(x))
library(datasets)
data(iris)
?iris
length(iris)
}
dim(iris)
ptlLengthMean <- function(iris, Petal.Length,id = 1:150 ) {
#fullnamefiles <- list.files(iris, full.names = TRUE)
alldata <- data.frame()
for (i in id) {
alldata <- rbind(alldata,)# read.csv(fullnamefiles[i]))
}
alldata_subset <- alldata[[Petal.Length]]
mean(alldata_subset, na.rm = TRUE)
}
ptlLengthMean <- function(x)) {
+     #fullnamefiles <- list.files(iris, full.names = TRUE)
+     alldata <- data.frame()
+     for (i in id) {
+         alldata <- rbind(alldata,)# read.csv(fullnamefiles[i]))
+     }
+     alldata_subset <- alldata[[Petal.Length]]
+     mean(alldata_subset, na.rm = TRUE)
+ }
dimnamesIris<-dimnames(iris)
meanIris<- tapply(iris, dimnamesIris, mean)
dimnamesIris
mtxIris<-matrix(Iris)
mtxIris<-matrix(iris)
mtxIris
mtxIris<- matrix(c(dimnamesIris[1]),c(dimnamesIris[2])
)
mtxIris<- data.frame(c(dimnamesIris[1]),c(dimnamesIris[2]))
mtxIris
iris[iris["nobs"]}$id
iris[iris["nobs"]]$id
data.frame(iris)
mean(iris$Sepal.Length)
lapply(split(iris, $Species),mean)
lapply(split(iris, iris[$Species]),mean)
lapply(split(iris, iris["Species"]),mean)
species<- split(iris, iris["Species"])
species
tapply(species)
tapply(species,mean)
lapply(species,mean)
columnmeans(species)
lapply(species,mean,na.rm=TRUE)
summary(species)
mean(species)
mean(species[Petal.Length])
species
colMeans(iris)
apply(iris, 1, mean)
apply(iris, 4, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 4], 1, mean)
apply(iris[, 4], 2, mean)
apply(iris[, 4:4], 2, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 3, mean)
apply(iris[, 1:4], 1, mean)
?apply
apply(iris[, 1:4], 2, mean)
apply(species[, 1:4], 2, mean)
apply(iris[species, 1:4], 2, mean)
apply(iris[vector(species), 1:4], 2, mean)
apply(iris[as.matrix(species), 1:4], 2, mean)
Virginica <- species[virginica]
dfIris
dfIris<- dataframe(iris)
dfIris<- data.frame(iris)
dfIris
iris
dfIris<- data.frame(iris) ## MOOT- already a data frame
species<- split(iris, iris["Species"]) # makes a list of Species each followed by rows and columns of their associated data
mapply(species, mean)
str(species)
lapply(species, function(x) {
colMeans(x[, c("Sepal.Length", "Sepal.Width", "Petal.Length","Petal.Width")])
})
library(datasets)
data(mtcars)
mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
t<-tapply(mtcars$cyl, mtcars$mpg, mean)
dim(t)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
s<- split(mtcars, mtcars$cyl)
lapply(s, function(x) {
colMeans(x[, c("mpg", "gear")])
})
sapply(split(iris$Sepal.Length, iris$Species), mean)
sapply(split(mtcars$mpg, mtcars$cyl), average)
mhp<- c(sapply(split(mtcars$hp, mtcars$cyl), median))
mhp
mhp[3]-mhp[1]
debug(ls)
ls
ls
library(swirl)
mhp<- c(sapply(split(mtcars$hp, mtcars$cyl), mean))
mhp[3]-mhp[1]
Q
library(swirl)
swirl
undebug(ls)
library(swirl)
swirl()
True==True
TRUE==TRUE
FALSE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!=7
5!==7
!5==7
FALSE&FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE< FALSE< FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8  && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints >5
which(ints >7)
any(ints)
any(ints <0)
all(ints >0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
submit()
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(devisor = 11, num=5)
remainder(divisor = 11, num=5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd(c(1.4, 3.6, 7.9, 8.8)))
sd(c(1.4, 3.6, 7.9, 8.8))
evaluate(sd(c(1.4, 3.6, 7.9, 8.8)))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1},6)
evaluate(function (x){c(8, 4, 0)},1)
evaluate(function (x){vect1<-c(8, 4, 0) | vect1[dat]},1)
evaluate(function (x){vect1<-c(8, 4, 0) | vect1[dat]},1)
evaluate(function (x){c(8, 4, 0)[dat]},1)
evaluate(function (x){x[1]}
evaluate(function (x){x[1]})
evaluate(function (x){x[1]})
evaluate(function (x){dat[1]})
evaluate(function (x){dat[1]},dat)
evaluate(function (x){dat[1]},c(8, 4, 0))
evaluate(function (x){dat[1]},dat=c(8, 4, 0))
evaluate(function(x){ dat[1] }, dat=c(8, 4, 0))
info()
evaluate(function (x){c(8, 4, 0)},col=1)
evaluate(function (x){dat(1)},dat=c(8, 4, 0))
evaluate(function (x){v<-dat | v[1]},dat=c(8, 4, 0))
evaluate(function (dat=c(8, 4, 0)){x<-vector(dat) x[1]})
evaluate(function (x){[c(8, 4, 0)][x]})
q
evaluate(function (x=1){vi<-index(c(8, 4, 0)) vi[x]})
evaluate(function (x=1){vi<-index(c(8, 4, 0)), vi[x]})
evaluate(function (x=1){vi<-index(c(8, 4, 0)), |   vi[x]})
evaluate(function (x=1){vi<-index(c(8, 4, 0)) |   vi[x]})
evaluate(function (x=c(8, 4, 0)){x[1]})
ls
ls()
pollutantmean <- read.csv("~/datasciencecoursera/pollutantmean.R", header=FALSE, comment.char="#")
View(pollutantmean)
hw1_data <- read.csv("~/datasciencecoursera/hw1_data.csv")
View(hw1_data)
temp = list.files(pattern="*.csv")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(pollutantmean)
summary(pollutantmean)
View(pollutantmean)
View(pollutantmean)
